CustomList<T> - Operator

Namespace: System.MyCustomList

Systematically removes single, common instances of type T found within list2 from list1.
Returns the remaining unique instances of type T from list1 as a new CustomList<T>. The values of the operands remain unchanged throughout the application of the - Operator.

Syntax:
	C#: CustomList<T> newList = list1 - list2;



Parameters:

	The - Operator functions between any two instantiated CustomList<T> objects. Lists do not need to contain any values in order to function with the - operator.



Returns: CustomList<T>

	The - Operator attempts to sequentially remove each value contained within list2 from each individual value contained within list1. For any single value in list2 that is found in list1, the first instance of said value is removed from list1; for any single value in list2 that is not found in list1, list1 remains unchanged. The sequence continues with the next value in list2 until all values have been exhausted.
    Values are removed at a ratio of 1:1. Any single value in list2 that is found in list1 will cause only the first occurence of that value to be removed from list1. Multiple values can be removed from list1 throughout the application of the - Operator as long as separate, corresponding values exist in list2 (this rule applies equally to instances of duplicate values.)



Examples:

The following examples demonstrate the function and proper implementation of the - Operator on CustomList<T> objects.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyCustomList
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create new lists of type int.
            CustomList<int> intList1 = new CustomList<int>();
            CustomList<int> intList2 = new CustomList<int>();

            // Add values to each list, display contents to console.
            intList1.Add(1);
            intList1.Add(3);
            intList1.Add(5);
            Console.WriteLine("intList1 contains: " + intList1.ToString());

            intList2.Add(2);
            intList2.Add(1);
            intList2.Add(6);
            Console.WriteLine("intList2 contains: " + intList2.ToString());

            // Compare intList1 and intList2, find and remove common instance of '1' from intList1.
            CustomList<int> newIntList = intList1 - intList2;
            Console.WriteLine("newIntList contains: " + newIntList.ToString());

            /* 
            
            The above code example produces the following output:
              
                intList1 contains: 135
                intList2 contains: 216
                newIntList contains: 35
             
            */

            CustomList<bool> boolList1 = new CustomList<bool>();
            CustomList<bool> boolList2 = new CustomList<bool>();

            boolList1.Add(true);
            boolList1.Add(false);
	    boolList1.Add(true);
            boolList1.Add(false);
            Console.WriteLine("boolList1 contains: " + boolList1.ToString());

            boolList2.Add(false);
            Console.WriteLine("boolList2 contains: " + boolList2.ToString());

            // Compare lists, find common instance of 'false.'
	    // Since boolList2 contains a single 'false' value,
	    // only the first instance of 'false' is removed from boolList1.
            CustomList<bool> newBoolList = boolList1 - boolList2;
            Console.WriteLine("newBoolList contains: " + newBoolList.ToString());

            /* 
            
            The above code example produces the following output:
              
                boolList1 contains: TrueFalseTrueFalse
                boolList2 contains: False
                newBoolList contains: TrueTrueFalse
             
            */

            CustomList<char> charList1 = new CustomList<char>();
            CustomList<char> charList2 = new CustomList<char>();

            charList1.Add('a');
            charList1.Add('b');
            Console.WriteLine("charList1 contains: " + charList1.ToString());
            
            charList2.Add('b');
            charList2.Add('c');
            charList2.Add('d');
            Console.WriteLine("charList2 contains: " + charList2.ToString());

            // Lists of different size and in any arrangement may be compared.
            CustomList<char> newCharList = charList1 - charList2;
            Console.WriteLine("newCharList contains: " + newCharList.ToString());

            /* 
            
            The above code example produces the following output:
              
                charList1 contains: ab
                charList2 contains: bcd
                newBoolList contains: a
             
            */

            CustomList<string> stringList1 = new CustomList<string>();
            CustomList<string> stringList2 = new CustomList<string>();

            Console.WriteLine("stringList1 contains: " + stringList1.ToString());

            stringList2.Add("Hello");
            stringList2.Add("World");
            Console.WriteLine("stringList2 contains: " + stringList2.ToString());

            // Empty lists may be compared to lists of any size.
            CustomList<string> newStringList = stringList1 - stringList2;
            Console.WriteLine("newStringList contains: " + newStringList.ToString());

            /* 
            
            The above code example produces the following output:
              
                stringList1 contains:
                stringList2 contains: HelloWorld
                newstringList contains:
             
            */
        }
    }
}
	
	